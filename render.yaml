databases:
  - name: keycloak-db
    plan: basic-1gb
    databaseName: users
  - name: app-db
    plan: basic-1gb
    databaseName: appdb

services:
  # --- Keycloak (private) ---
  - type: pserv
    name: keycloak
    runtime: image
    plan: starter
    image:
      url: quay.io/keycloak/keycloak:23.0.7
    dockerCommand: >
      start-dev --http-port=$PORT --import-realm --health-enabled=true
    envVars:
      - { key: PORT, value: "10000" }          # must listen on 0.0.0.0:$PORT
      - { key: KC_DB, value: postgres }
      - key: KC_DB_URL_HOST
        fromDatabase: { name: keycloak-db, property: host }
      - key: KC_DB_URL_DATABASE
        fromDatabase: { name: keycloak-db, property: database }
      - key: KC_DB_USERNAME
        fromDatabase: { name: keycloak-db, property: user }
      - key: KC_DB_PASSWORD
        fromDatabase: { name: keycloak-db, property: password }
      - { key: KEYCLOAK_ADMIN, value: admin }
      - { key: KEYCLOAK_ADMIN_PASSWORD, value: admin }
      - { key: KC_HEALTH_ENABLED, value: "true" }
      - { key: KC_LOG_LEVEL, value: info }
    # If you need realm.json, build a tiny custom image that COPYs it.

  # --- Spring Boot app (public web) ---
  - type: web
    name: app
    runtime: docker
    plan: starter
    dockerfilePath: ./Dockerfile
    dockerContext: .
    envVars:
      - { key: PORT, value: "10000" }               # Render default; app must bind here
      - { key: SERVER_PORT, value: "10000" }        # Spring Boot listen port
      - { key: SPRING_APPLICATION_NAME, value: infra }
      # Keycloak (uses private service hostname)
      - { key: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI, value: "http://keycloak:10000/realms/glimpse" }
      - { key: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI, value: "http://keycloak:10000/realms/glimpse" }
      - { key: KEYCLOAK_BASE_URL, value: "http://keycloak:10000" }
      - { key: KEYCLOAK_REALM, value: glimpse }
      - { key: KEYCLOAK_CLIENT_ID, value: aroundly }
      - { key: KEYCLOAK_CLIENT_SECRET, sync: false }  # set in dashboard
      # DB (managed)
      - key: SPRING_DATASOURCE_URL
        fromDatabase: { name: app-db, property: connectionString }
      - key: SPRING_DATASOURCE_USERNAME
        fromDatabase: { name: app-db, property: user }
      - key: SPRING_DATASOURCE_PASSWORD
        fromDatabase: { name: app-db, property: password }
      - { key: SPRING_FLYWAY_ENABLED, value: "true" }
      - { key: SPRING_FLYWAY_LOCATIONS, value: "classpath:db/migration" }

  # --- MinIO (private) ---
  - type: pserv
    name: minio
    runtime: image
    plan: starter
    image:
      url: minio/minio
    dockerCommand: >
      server /data --address ":$PORT" --console-address ":9001"
    envVars:
      - { key: PORT, value: "10000" }         # API on 10000; console remains 9001 (not routed)
      - { key: MINIO_ROOT_USER,  sync: false }
      - { key: MINIO_ROOT_PASSWORD, sync: false }
    disk:
      name: minio-data
      mountPath: /data
      sizeGB: 10

  # --- Grafana (public web) ---
  - type: web
    name: grafana
    runtime: image
    plan: starter
    image:
      url: grafana/grafana-oss
    envVars:
      - { key: PORT, value: "10000" }
      - { key: GF_SECURITY_ADMIN_USER, value: admin }
      - { key: GF_SECURITY_ADMIN_PASSWORD, value: password }
      - { key: GF_SERVER_HTTP_PORT, value: "10000" }  # make Grafana bind to Render port
    disk:
      name: grafana-data
      mountPath: /var/lib/grafana
      sizeGB: 1

  # --- pgAdmin (public web) ---
  - type: web
    name: pgadmin
    runtime: image
    plan: starter
    image:
      url: dpage/pgadmin4
    envVars:
      - { key: PORT, value: "10000" }
      - { key: PGADMIN_DEFAULT_EMAIL, value: admin@pgadmin.com }
      - { key: PGADMIN_DEFAULT_PASSWORD, value: password }
      - { key: PGADMIN_LISTEN_PORT, value: "10000" } # bind to Render port
    disk:
      name: pgadmin-data
      mountPath: /var/lib/pgadmin
      sizeGB: 1